
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.1
 * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
 */
Prisma.prismaVersion = {
  client: "6.17.1",
  engine: "272a37d34178c2894197e17273bf937f25acdeac"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  name: 'name',
  role: 'role',
  tier: 'tier',
  permissions: 'permissions',
  orgId: 'orgId',
  status: 'status',
  lastLoginAt: 'lastLoginAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  twoFactorEnabled: 'twoFactorEnabled',
  twoFactorSecret: 'twoFactorSecret',
  backupCodes: 'backupCodes',
  failedLoginAttempts: 'failedLoginAttempts',
  lockedUntil: 'lockedUntil',
  passwordChangedAt: 'passwordChangedAt',
  ssoProvider: 'ssoProvider',
  ssoId: 'ssoId',
  ssoMetadata: 'ssoMetadata',
  currentPersona: 'currentPersona',
  personaLocked: 'personaLocked',
  lamportCounter: 'lamportCounter',
  lastReceiptId: 'lastReceiptId'
};

exports.Prisma.OrganizationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  plan: 'plan',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TeamScalarFieldEnum = {
  id: 'id',
  name: 'name',
  orgId: 'orgId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TeamMemberScalarFieldEnum = {
  id: 'id',
  teamId: 'teamId',
  userId: 'userId',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SharedTestCollectionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  teamId: 'teamId',
  createdBy: 'createdBy',
  isPublic: 'isPublic',
  tags: 'tags',
  testIds: 'testIds',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RateLimitQuotaScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  provider: 'provider',
  endpoint: 'endpoint',
  limit: 'limit',
  used: 'used',
  resetAt: 'resetAt',
  windowMinutes: 'windowMinutes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TestTemplateScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  category: 'category',
  userId: 'userId',
  teamId: 'teamId',
  isPublic: 'isPublic',
  isPredefined: 'isPredefined',
  tags: 'tags',
  config: 'config',
  sharedWith: 'sharedWith',
  useCount: 'useCount',
  favoriteCount: 'favoriteCount',
  version: 'version',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WebhookScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  userId: 'userId',
  teamId: 'teamId',
  url: 'url',
  secret: 'secret',
  events: 'events',
  method: 'method',
  headers: 'headers',
  payloadTemplate: 'payloadTemplate',
  isActive: 'isActive',
  retryEnabled: 'retryEnabled',
  maxRetries: 'maxRetries',
  retryDelay: 'retryDelay',
  totalCalls: 'totalCalls',
  successCount: 'successCount',
  failureCount: 'failureCount',
  lastTriggered: 'lastTriggered',
  lastSuccess: 'lastSuccess',
  lastFailure: 'lastFailure',
  lastError: 'lastError',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WebhookLogScalarFieldEnum = {
  id: 'id',
  webhookId: 'webhookId',
  event: 'event',
  payload: 'payload',
  url: 'url',
  method: 'method',
  headers: 'headers',
  statusCode: 'statusCode',
  responseBody: 'responseBody',
  responseTime: 'responseTime',
  attempt: 'attempt',
  success: 'success',
  error: 'error',
  createdAt: 'createdAt'
};

exports.Prisma.ApiRateLimitScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  provider: 'provider',
  limitType: 'limitType',
  limitPeriod: 'limitPeriod',
  maxLimit: 'maxLimit',
  currentUsage: 'currentUsage',
  resetAt: 'resetAt',
  warningThreshold: 'warningThreshold',
  lastWarningAt: 'lastWarningAt',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  expiresAt: 'expiresAt',
  userAgent: 'userAgent',
  ipAddress: 'ipAddress',
  createdAt: 'createdAt',
  lastUsedAt: 'lastUsedAt'
};

exports.Prisma.AuditRecordScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  category: 'category',
  details: 'details',
  metadata: 'metadata',
  status: 'status',
  lamport: 'lamport',
  hashPointer: 'hashPointer',
  createdAt: 'createdAt'
};

exports.Prisma.LamportStateScalarFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value',
  lamport: 'lamport',
  metadata: 'metadata',
  modified: 'modified'
};

exports.Prisma.BudgetScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  limit: 'limit',
  period: 'period',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RegressionBaselineScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  modelName: 'modelName',
  modelVersion: 'modelVersion',
  testType: 'testType',
  avgResponseTime: 'avgResponseTime',
  avgCost: 'avgCost',
  avgQualityScore: 'avgQualityScore',
  avgAccuracy: 'avgAccuracy',
  successRate: 'successRate',
  alertThreshold: 'alertThreshold',
  sampleSize: 'sampleSize',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FeedbackScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  category: 'category',
  priority: 'priority',
  subject: 'subject',
  message: 'message',
  url: 'url',
  userAgent: 'userAgent',
  metadata: 'metadata',
  attachmentUrls: 'attachmentUrls',
  status: 'status',
  assignedTo: 'assignedTo',
  response: 'response',
  respondedAt: 'respondedAt',
  respondedBy: 'respondedBy',
  sentiment: 'sentiment',
  sentimentScore: 'sentimentScore',
  upvotes: 'upvotes',
  isPublic: 'isPublic',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  resolvedAt: 'resolvedAt'
};

exports.Prisma.IpWhitelistScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  orgId: 'orgId',
  ipAddress: 'ipAddress',
  description: 'description',
  isActive: 'isActive',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastUsedAt: 'lastUsedAt'
};

exports.Prisma.SecurityEventScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  eventType: 'eventType',
  severity: 'severity',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  description: 'description',
  metadata: 'metadata',
  resolved: 'resolved',
  resolvedBy: 'resolvedBy',
  resolvedAt: 'resolvedAt',
  createdAt: 'createdAt'
};

exports.Prisma.TwoFactorBackupScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  code: 'code',
  used: 'used',
  usedAt: 'usedAt',
  createdAt: 'createdAt'
};

exports.Prisma.SSOConfigurationScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  provider: 'provider',
  enabled: 'enabled',
  samlEntryPoint: 'samlEntryPoint',
  samlIssuer: 'samlIssuer',
  samlCert: 'samlCert',
  samlCallbackUrl: 'samlCallbackUrl',
  samlLogoutUrl: 'samlLogoutUrl',
  oauthClientId: 'oauthClientId',
  oauthClientSecret: 'oauthClientSecret',
  oauthAuthUrl: 'oauthAuthUrl',
  oauthTokenUrl: 'oauthTokenUrl',
  oauthUserInfoUrl: 'oauthUserInfoUrl',
  oauthScopes: 'oauthScopes',
  domainRestriction: 'domainRestriction',
  jitProvisioning: 'jitProvisioning',
  defaultRole: 'defaultRole',
  defaultTier: 'defaultTier',
  metadata: 'metadata',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastUsedAt: 'lastUsedAt'
};

exports.Prisma.SSOSessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  provider: 'provider',
  sessionId: 'sessionId',
  nameId: 'nameId',
  sessionIndex: 'sessionIndex',
  attributes: 'attributes',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  lastActivityAt: 'lastActivityAt'
};

exports.Prisma.SSOAuditLogScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  userId: 'userId',
  provider: 'provider',
  eventType: 'eventType',
  success: 'success',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  errorMessage: 'errorMessage',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.NotificationPreferenceScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  emailEnabled: 'emailEnabled',
  testComplete: 'testComplete',
  batchComplete: 'batchComplete',
  scheduledTestComplete: 'scheduledTestComplete',
  alertsEnabled: 'alertsEnabled',
  lowScoreThreshold: 'lowScoreThreshold',
  highScoreThreshold: 'highScoreThreshold',
  scoreDropAlert: 'scoreDropAlert',
  witnessFailureAlert: 'witnessFailureAlert',
  dailyReport: 'dailyReport',
  weeklyReport: 'weeklyReport',
  monthlyReport: 'monthlyReport',
  reportTime: 'reportTime',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TestResultScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  modelName: 'modelName',
  modelProvider: 'modelProvider',
  prompt: 'prompt',
  response: 'response',
  criesScore: 'criesScore',
  responseTime: 'responseTime',
  tokenCount: 'tokenCount',
  cost: 'cost',
  status: 'status',
  errorMessage: 'errorMessage',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.LamportCounterScalarFieldEnum = {
  id: 'id',
  currentValue: 'currentValue',
  lastUpdated: 'lastUpdated',
  lastReceiptId: 'lastReceiptId',
  metadata: 'metadata'
};

exports.Prisma.BENReceiptScalarFieldEnum = {
  id: 'id',
  receiptType: 'receiptType',
  lamportClock: 'lamportClock',
  realTimestamp: 'realTimestamp',
  userId: 'userId',
  persona: 'persona',
  track: 'track',
  payload: 'payload',
  digest: 'digest',
  previousDigest: 'previousDigest',
  baselineDigest: 'baselineDigest',
  witnessModel: 'witnessModel',
  witnessSignature: 'witnessSignature',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.BENSessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  persona: 'persona',
  priority: 'priority',
  locked: 'locked',
  startedAt: 'startedAt',
  endedAt: 'endedAt',
  duration: 'duration',
  startLamport: 'startLamport',
  endLamport: 'endLamport',
  switchReason: 'switchReason',
  metadata: 'metadata'
};

exports.Prisma.TriTrackHandoffScalarFieldEnum = {
  id: 'id',
  fromTrack: 'fromTrack',
  toTrack: 'toTrack',
  status: 'status',
  fromReceiptId: 'fromReceiptId',
  toReceiptId: 'toReceiptId',
  initiatedAt: 'initiatedAt',
  completedAt: 'completedAt',
  latencyMs: 'latencyMs',
  exceededLimit: 'exceededLimit',
  payload: 'payload',
  result: 'result',
  errorMessage: 'errorMessage',
  metadata: 'metadata'
};

exports.Prisma.WitnessSignatureScalarFieldEnum = {
  id: 'id',
  modelName: 'modelName',
  modelFingerprint: 'modelFingerprint',
  receiptId: 'receiptId',
  receiptDigest: 'receiptDigest',
  signature: 'signature',
  signedAt: 'signedAt',
  lamportClock: 'lamportClock',
  verified: 'verified',
  verifiedAt: 'verifiedAt',
  verificationData: 'verificationData',
  metadata: 'metadata'
};

exports.Prisma.CRIESComputationScalarFieldEnum = {
  id: 'id',
  testResultId: 'testResultId',
  userId: 'userId',
  sigmaWindow: 'sigmaWindow',
  tauThreshold: 'tauThreshold',
  piPolicy: 'piPolicy',
  citationQuality: 'citationQuality',
  criesScore: 'criesScore',
  lamportClock: 'lamportClock',
  computedAt: 'computedAt',
  receiptId: 'receiptId',
  analysisData: 'analysisData',
  metadata: 'metadata'
};

exports.Prisma.ZScanVerificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  totalRules: 'totalRules',
  passed: 'passed',
  warnings: 'warnings',
  critical: 'critical',
  results: 'results',
  config: 'config',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Role = exports.$Enums.Role = {
  USER: 'USER',
  ADMIN: 'ADMIN',
  ARCHITECT: 'ARCHITECT',
  AUDITOR: 'AUDITOR',
  WITNESS: 'WITNESS'
};

exports.UserTier = exports.$Enums.UserTier = {
  FREE: 'FREE',
  PAID: 'PAID',
  ARCHITECT: 'ARCHITECT'
};

exports.UserStatus = exports.$Enums.UserStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  SUSPENDED: 'SUSPENDED'
};

exports.BENPersona = exports.$Enums.BENPersona = {
  USER: 'USER',
  VERIFIER: 'VERIFIER',
  ANALYST: 'ANALYST',
  GOVERNOR: 'GOVERNOR',
  ARCHITECT: 'ARCHITECT'
};

exports.Permission = exports.$Enums.Permission = {
  READ_LOGS: 'READ_LOGS',
  WRITE_LOGS: 'WRITE_LOGS',
  MANAGE_USERS: 'MANAGE_USERS',
  MANAGE_TEAMS: 'MANAGE_TEAMS',
  VERIFY_RECORDS: 'VERIFY_RECORDS',
  EXPORT_DATA: 'EXPORT_DATA',
  VIEW_ANALYTICS: 'VIEW_ANALYTICS',
  MANAGE_SETTINGS: 'MANAGE_SETTINGS'
};

exports.PlanType = exports.$Enums.PlanType = {
  TRIAL: 'TRIAL',
  BASIC: 'BASIC',
  PRO: 'PRO',
  ENTERPRISE: 'ENTERPRISE'
};

exports.OrgStatus = exports.$Enums.OrgStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  SUSPENDED: 'SUSPENDED',
  TRIAL: 'TRIAL'
};

exports.TeamRole = exports.$Enums.TeamRole = {
  OWNER: 'OWNER',
  ADMIN: 'ADMIN',
  MEMBER: 'MEMBER',
  VIEWER: 'VIEWER'
};

exports.AuditCategory = exports.$Enums.AuditCategory = {
  AUTH: 'AUTH',
  ACCESS: 'ACCESS',
  DATA: 'DATA',
  CONFIG: 'CONFIG',
  VERIFICATION: 'VERIFICATION',
  SYSTEM: 'SYSTEM'
};

exports.AuditStatus = exports.$Enums.AuditStatus = {
  SUCCESS: 'SUCCESS',
  FAILURE: 'FAILURE',
  WARNING: 'WARNING',
  INFO: 'INFO'
};

exports.FeedbackType = exports.$Enums.FeedbackType = {
  BUG: 'BUG',
  FEATURE: 'FEATURE',
  IMPROVEMENT: 'IMPROVEMENT',
  QUESTION: 'QUESTION',
  OTHER: 'OTHER'
};

exports.FeedbackCategory = exports.$Enums.FeedbackCategory = {
  UI_UX: 'UI_UX',
  PERFORMANCE: 'PERFORMANCE',
  ACCURACY: 'ACCURACY',
  DOCUMENTATION: 'DOCUMENTATION',
  API: 'API',
  BILLING: 'BILLING',
  SECURITY: 'SECURITY',
  GENERAL: 'GENERAL'
};

exports.FeedbackPriority = exports.$Enums.FeedbackPriority = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

exports.FeedbackStatus = exports.$Enums.FeedbackStatus = {
  OPEN: 'OPEN',
  IN_PROGRESS: 'IN_PROGRESS',
  RESOLVED: 'RESOLVED',
  CLOSED: 'CLOSED',
  WONT_FIX: 'WONT_FIX'
};

exports.SecurityEventType = exports.$Enums.SecurityEventType = {
  LOGIN_SUCCESS: 'LOGIN_SUCCESS',
  LOGIN_FAILED: 'LOGIN_FAILED',
  LOGOUT: 'LOGOUT',
  PASSWORD_CHANGE: 'PASSWORD_CHANGE',
  PASSWORD_RESET: 'PASSWORD_RESET',
  TWO_FACTOR_ENABLED: 'TWO_FACTOR_ENABLED',
  TWO_FACTOR_DISABLED: 'TWO_FACTOR_DISABLED',
  TWO_FACTOR_VERIFIED: 'TWO_FACTOR_VERIFIED',
  TWO_FACTOR_FAILED: 'TWO_FACTOR_FAILED',
  ACCOUNT_LOCKED: 'ACCOUNT_LOCKED',
  ACCOUNT_UNLOCKED: 'ACCOUNT_UNLOCKED',
  IP_WHITELIST_ADDED: 'IP_WHITELIST_ADDED',
  IP_WHITELIST_REMOVED: 'IP_WHITELIST_REMOVED',
  IP_BLOCKED: 'IP_BLOCKED',
  SESSION_CREATED: 'SESSION_CREATED',
  SESSION_TERMINATED: 'SESSION_TERMINATED',
  PERMISSION_CHANGED: 'PERMISSION_CHANGED',
  SUSPICIOUS_ACTIVITY: 'SUSPICIOUS_ACTIVITY'
};

exports.SecuritySeverity = exports.$Enums.SecuritySeverity = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  CRITICAL: 'CRITICAL'
};

exports.SSOProvider = exports.$Enums.SSOProvider = {
  SAML: 'SAML',
  AZURE_AD: 'AZURE_AD',
  GOOGLE: 'GOOGLE',
  OKTA: 'OKTA',
  GENERIC_OAUTH: 'GENERIC_OAUTH'
};

exports.SSOEventType = exports.$Enums.SSOEventType = {
  SSO_LOGIN_SUCCESS: 'SSO_LOGIN_SUCCESS',
  SSO_LOGIN_FAILED: 'SSO_LOGIN_FAILED',
  SSO_LOGOUT: 'SSO_LOGOUT',
  SSO_CONFIG_CREATED: 'SSO_CONFIG_CREATED',
  SSO_CONFIG_UPDATED: 'SSO_CONFIG_UPDATED',
  SSO_CONFIG_DELETED: 'SSO_CONFIG_DELETED',
  SSO_CONFIG_ENABLED: 'SSO_CONFIG_ENABLED',
  SSO_CONFIG_DISABLED: 'SSO_CONFIG_DISABLED',
  JIT_USER_CREATED: 'JIT_USER_CREATED',
  JIT_USER_UPDATED: 'JIT_USER_UPDATED',
  SSO_SESSION_EXPIRED: 'SSO_SESSION_EXPIRED',
  SSO_CALLBACK_ERROR: 'SSO_CALLBACK_ERROR',
  SAML_ASSERTION_ERROR: 'SAML_ASSERTION_ERROR',
  OAUTH_TOKEN_ERROR: 'OAUTH_TOKEN_ERROR'
};

exports.ReceiptType = exports.$Enums.ReceiptType = {
  BOOT_CONFIRM: 'BOOT_CONFIRM',
  ANALYSIS: 'ANALYSIS',
  DIRECTIVE: 'DIRECTIVE',
  RESULT: 'RESULT',
  APPEND: 'APPEND',
  SYNC_POINT: 'SYNC_POINT'
};

exports.TrackType = exports.$Enums.TrackType = {
  BEN_CORE: 'BEN_CORE',
  AUDITAAI: 'AUDITAAI',
  HUMAN: 'HUMAN'
};

exports.HandoffStatus = exports.$Enums.HandoffStatus = {
  INITIATED: 'INITIATED',
  IN_TRANSIT: 'IN_TRANSIT',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  TIMEOUT: 'TIMEOUT'
};

exports.Prisma.ModelName = {
  User: 'User',
  Organization: 'Organization',
  Team: 'Team',
  TeamMember: 'TeamMember',
  SharedTestCollection: 'SharedTestCollection',
  RateLimitQuota: 'RateLimitQuota',
  TestTemplate: 'TestTemplate',
  Webhook: 'Webhook',
  WebhookLog: 'WebhookLog',
  ApiRateLimit: 'ApiRateLimit',
  Session: 'Session',
  AuditRecord: 'AuditRecord',
  LamportState: 'LamportState',
  Budget: 'Budget',
  RegressionBaseline: 'RegressionBaseline',
  Feedback: 'Feedback',
  IpWhitelist: 'IpWhitelist',
  SecurityEvent: 'SecurityEvent',
  TwoFactorBackup: 'TwoFactorBackup',
  SSOConfiguration: 'SSOConfiguration',
  SSOSession: 'SSOSession',
  SSOAuditLog: 'SSOAuditLog',
  NotificationPreference: 'NotificationPreference',
  TestResult: 'TestResult',
  LamportCounter: 'LamportCounter',
  BENReceipt: 'BENReceipt',
  BENSession: 'BENSession',
  TriTrackHandoff: 'TriTrackHandoff',
  WitnessSignature: 'WitnessSignature',
  CRIESComputation: 'CRIESComputation',
  ZScanVerification: 'ZScanVerification'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
