// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  // Inlined for debug: use the same DATABASE_URL present in backend/.env to
  // test whether the Optimize extension requires the URL to be present in the
  // generated client schema rather than readable from process.env at attach.
  url      = "postgres://602197f00e8365db70a65c273a252d29dd8416ebc9aa13b39a924676dded4798:sk_ko_froDrCyfZeaW4up1_w@db.prisma.io:5432/postgres?sslmode=require"
}

model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  password     String
  name         String?
  role         Role          @default(USER)
  tier         UserTier      @default(FREE)
  permissions  Permission[]  @default([])
  organization Organization? @relation(fields: [orgId], references: [id])
  orgId        Int?
  status       UserStatus    @default(ACTIVE)
  lastLoginAt  DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  // Security features
  twoFactorEnabled    Boolean   @default(false)
  twoFactorSecret     String?
  backupCodes         String[]  @default([])
  failedLoginAttempts Int       @default(0)
  lockedUntil         DateTime?
  passwordChangedAt   DateTime?

  // SSO features
  ssoProvider String? // 'saml', 'azure_ad', 'google', 'okta'
  ssoId       String? @unique // External SSO user ID
  ssoMetadata Json? // Additional SSO metadata

  // BEN Runtime features
  currentPersona BENPersona @default(USER)
  personaLocked  Boolean    @default(false)
  lamportCounter Int        @default(0)
  lastReceiptId  Int?

  // Relations
  sessions            Session[]
  audits              AuditRecord[]
  teams               TeamMember[]
  notifications       NotificationPreference?
  budgets             Budget[]
  regressionBaselines RegressionBaseline[]
  feedbacks           Feedback[]
  benReceipts         BENReceipt[]
  benSessions         BENSession[]
  zscans              ZScanVerification[]
}

model Organization {
  id         Int                @id @default(autoincrement())
  name       String
  plan       PlanType           @default(TRIAL)
  status     OrgStatus          @default(ACTIVE)
  users      User[]
  teams      Team[]
  ssoConfigs SSOConfiguration[]
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
}

model Team {
  id           Int          @id @default(autoincrement())
  name         String
  organization Organization @relation(fields: [orgId], references: [id])
  orgId        Int
  members      TeamMember[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model TeamMember {
  id        Int      @id @default(autoincrement())
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  role      TeamRole @default(MEMBER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([teamId, userId])
}

model SharedTestCollection {
  id          Int      @id @default(autoincrement())
  name        String
  description String?  @db.Text
  teamId      Int
  createdBy   Int
  isPublic    Boolean  @default(false)
  tags        String[] @default([])
  testIds     Int[]    @default([]) // References to TestResult IDs
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([teamId, createdAt])
  @@index([createdBy, createdAt])
}

model RateLimitQuota {
  id            Int      @id @default(autoincrement())
  userId        Int
  provider      String // 'openai', 'anthropic', 'google', etc.
  endpoint      String // 'chat', 'embeddings', etc.
  limit         Int // Max requests allowed
  used          Int      @default(0)
  resetAt       DateTime
  windowMinutes Int      @default(60) // Rate limit window duration
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([userId, provider, endpoint])
  @@index([userId, resetAt])
  @@index([provider, endpoint])
}

model TestTemplate {
  id           Int      @id @default(autoincrement())
  name         String
  description  String?  @db.Text
  category     String // 'chatbot', 'content-generation', 'data-extraction', 'custom'
  userId       Int // Creator
  teamId       Int? // Optional team ownership
  isPublic     Boolean  @default(false)
  isPredefined Boolean  @default(false) // System templates vs user templates
  tags         String[] @default([])

  // Template configuration
  config Json // Full test configuration (prompts, models, parameters)

  // Sharing and collaboration
  sharedWith Int[] @default([]) // User IDs with access

  // Usage stats
  useCount      Int @default(0)
  favoriteCount Int @default(0)

  // Metadata
  version   String   @default("1.0.0")
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, createdAt])
  @@index([category, isPublic])
  @@index([teamId, createdAt])
  @@index([isPredefined, category])
}

model Webhook {
  id          Int     @id @default(autoincrement())
  name        String
  description String? @db.Text
  userId      Int
  teamId      Int?
  url         String  @db.Text
  secret      String? // For HMAC signature verification

  // Event triggers
  events String[] @default([]) // ['test.completed', 'test.failed', 'threshold.breached']

  // Configuration
  method          String @default("POST") // HTTP method
  headers         Json? // Custom headers
  payloadTemplate Json? // Custom payload format

  // State
  isActive Boolean @default(true)

  // Retry configuration
  retryEnabled Boolean @default(true)
  maxRetries   Int     @default(3)
  retryDelay   Int     @default(1000) // milliseconds

  // Statistics
  totalCalls    Int       @default(0)
  successCount  Int       @default(0)
  failureCount  Int       @default(0)
  lastTriggered DateTime?
  lastSuccess   DateTime?
  lastFailure   DateTime?
  lastError     String?   @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, isActive])
  @@index([teamId, isActive])
  @@index([events])
}

model WebhookLog {
  id        Int    @id @default(autoincrement())
  webhookId Int
  event     String // Event that triggered the webhook
  payload   Json // Payload sent

  // Request details
  url     String @db.Text
  method  String
  headers Json?

  // Response details
  statusCode   Int?
  responseBody String? @db.Text
  responseTime Int? // milliseconds

  // Retry information
  attempt Int     @default(1)
  success Boolean
  error   String? @db.Text

  createdAt DateTime @default(now())

  @@index([webhookId, createdAt])
  @@index([event, createdAt])
  @@index([success, createdAt])
}

model ApiRateLimit {
  id               Int       @id @default(autoincrement())
  userId           Int
  provider         String // 'openai', 'anthropic', 'google', etc.
  limitType        String // 'requests', 'tokens'
  limitPeriod      String // 'minute', 'hour', 'day', 'month'
  maxLimit         Int // Maximum allowed
  currentUsage     Int       @default(0)
  resetAt          DateTime
  warningThreshold Int       @default(80) // Percentage
  lastWarningAt    DateTime?
  metadata         Json?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@unique([userId, provider, limitType, limitPeriod])
  @@index([userId, provider, limitType])
  @@index([resetAt])
}

model Session {
  id         Int      @id @default(autoincrement())
  userId     Int
  expiresAt  DateTime
  userAgent  String?
  ipAddress  String?
  createdAt  DateTime @default(now())
  lastUsedAt DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
}

model AuditRecord {
  id          Int           @id @default(autoincrement())
  userId      Int
  action      String
  category    AuditCategory
  details     Json?
  metadata    Json?
  status      AuditStatus   @default(SUCCESS)
  lamport     Int
  hashPointer String? // For blockchain verification
  createdAt   DateTime      @default(now())
  user        User          @relation(fields: [userId], references: [id])

  @@index([category, createdAt])
  @@index([userId, createdAt])
}

model LamportState {
  id       Int      @id @default(autoincrement())
  key      String   @unique
  value    String
  lamport  Int
  metadata Json?
  modified DateTime @default(now())

  @@index([key, lamport])
}

model Budget {
  id        Int      @id @default(autoincrement())
  userId    Int
  limit     Float // Monthly budget limit in USD
  period    String   @default("monthly") // monthly, weekly, yearly
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId, createdAt])
}

model RegressionBaseline {
  id           Int     @id @default(autoincrement())
  userId       Int
  modelName    String
  modelVersion String? // e.g., "gpt-4-0125-preview"
  testType     String // e.g., "general", "coding", "reasoning"

  // Baseline metrics
  avgResponseTime Float
  avgCost         Float
  avgQualityScore Float
  avgAccuracy     Float
  successRate     Float

  // Threshold for alerts (percentage degradation)
  alertThreshold Float @default(10.0) // Alert if performance drops by 10%

  // Metadata
  sampleSize Int // Number of tests used to establish baseline
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, modelName, modelVersion, testType])
  @@index([userId, modelName, isActive])
}

model Feedback {
  id       Int              @id @default(autoincrement())
  userId   Int
  type     FeedbackType
  category FeedbackCategory
  priority FeedbackPriority @default(MEDIUM)
  subject  String
  message  String           @db.Text

  // Context information
  url       String? // Page where feedback was submitted
  userAgent String?
  metadata  Json? // Additional context (browser, viewport, etc.)

  // Attachment support
  attachmentUrls String[] @default([])

  // Status tracking
  status     FeedbackStatus @default(OPEN)
  assignedTo Int? // Admin user ID

  // Response
  response    String?   @db.Text
  respondedAt DateTime?
  respondedBy Int?

  // Sentiment analysis
  sentiment      String? // 'positive', 'neutral', 'negative'
  sentimentScore Float? // 0-100

  // Voting/rating
  upvotes  Int     @default(0)
  isPublic Boolean @default(false) // Show in public roadmap

  // Timestamps
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  resolvedAt DateTime?

  user User @relation(fields: [userId], references: [id])

  @@index([userId, createdAt])
  @@index([type, status])
  @@index([category, status])
  @@index([priority, status])
  @@index([assignedTo, status])
}

model IpWhitelist {
  id          Int       @id @default(autoincrement())
  userId      Int?
  orgId       Int?
  ipAddress   String // IP address or CIDR range (e.g., "192.168.1.0/24")
  description String?
  isActive    Boolean   @default(true)
  createdBy   Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lastUsedAt  DateTime?

  @@index([userId, isActive])
  @@index([orgId, isActive])
  @@index([ipAddress])
}

model SecurityEvent {
  id          Int               @id @default(autoincrement())
  userId      Int?
  eventType   SecurityEventType
  severity    SecuritySeverity  @default(MEDIUM)
  ipAddress   String?
  userAgent   String?
  description String            @db.Text
  metadata    Json? // Additional event data
  resolved    Boolean           @default(false)
  resolvedBy  Int?
  resolvedAt  DateTime?
  createdAt   DateTime          @default(now())

  @@index([userId, createdAt])
  @@index([eventType, createdAt])
  @@index([severity, resolved])
}

model TwoFactorBackup {
  id        Int       @id @default(autoincrement())
  userId    Int
  code      String    @unique
  used      Boolean   @default(false)
  usedAt    DateTime?
  createdAt DateTime  @default(now())

  @@index([userId, used])
  @@index([code])
}

model SSOConfiguration {
  id           Int          @id @default(autoincrement())
  organization Organization @relation(fields: [orgId], references: [id])
  orgId        Int
  provider     SSOProvider
  enabled      Boolean      @default(false)

  // SAML Configuration
  samlEntryPoint  String? // IdP SSO URL
  samlIssuer      String? // IdP Issuer/Entity ID
  samlCert        String? @db.Text // IdP Certificate
  samlCallbackUrl String? // SP Callback URL
  samlLogoutUrl   String? // IdP Logout URL

  // OAuth 2.0 Configuration
  oauthClientId     String?
  oauthClientSecret String?
  oauthAuthUrl      String?
  oauthTokenUrl     String?
  oauthUserInfoUrl  String?
  oauthScopes       String[] @default([])

  // Common Settings
  domainRestriction String[] @default([]) // Email domain whitelist
  jitProvisioning   Boolean  @default(true) // Just-In-Time user creation
  defaultRole       Role     @default(USER)
  defaultTier       UserTier @default(FREE)

  // Metadata
  metadata   Json? // Additional provider-specific data
  createdBy  Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  lastUsedAt DateTime?

  @@unique([orgId, provider])
  @@index([provider, enabled])
}

model SSOSession {
  id             Int         @id @default(autoincrement())
  userId         Int
  provider       SSOProvider
  sessionId      String      @unique // SSO session ID
  nameId         String? // SAML NameID or OAuth sub
  sessionIndex   String? // SAML SessionIndex
  attributes     Json? // User attributes from IdP
  ipAddress      String?
  userAgent      String?
  expiresAt      DateTime
  createdAt      DateTime    @default(now())
  lastActivityAt DateTime    @default(now())

  @@index([userId, provider])
  @@index([sessionId])
  @@index([expiresAt])
}

model SSOAuditLog {
  id           Int          @id @default(autoincrement())
  orgId        Int?
  userId       Int?
  provider     SSOProvider
  eventType    SSOEventType
  success      Boolean
  ipAddress    String?
  userAgent    String?
  errorMessage String?      @db.Text
  metadata     Json?
  createdAt    DateTime     @default(now())

  @@index([orgId, createdAt])
  @@index([userId, createdAt])
  @@index([provider, eventType])
}

model NotificationPreference {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  // Email notifications
  emailEnabled          Boolean @default(true)
  testComplete          Boolean @default(true)
  batchComplete         Boolean @default(true)
  scheduledTestComplete Boolean @default(true)

  // Performance alerts
  alertsEnabled       Boolean @default(true)
  lowScoreThreshold   Float   @default(70)
  highScoreThreshold  Float   @default(90)
  scoreDropAlert      Boolean @default(true)
  witnessFailureAlert Boolean @default(true)

  // Scheduled reports
  dailyReport   Boolean @default(false)
  weeklyReport  Boolean @default(true)
  monthlyReport Boolean @default(false)
  reportTime    String  @default("09:00") // HH:mm format

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TestResult {
  id            Int      @id @default(autoincrement())
  userId        Int
  modelName     String
  modelProvider String
  prompt        String   @db.Text
  response      String?  @db.Text
  criesScore    Float?
  responseTime  Int? // milliseconds
  tokenCount    Int?
  cost          Float?
  status        String // 'completed', 'failed', 'pending'
  errorMessage  String?  @db.Text
  metadata      Json? // Additional test metadata
  createdAt     DateTime @default(now())

  @@index([userId, createdAt])
  @@index([modelName, createdAt])
  @@index([userId, modelName, createdAt])
}

// ===== BEN Runtime Models =====

// Global Lamport counter for monotonic time tracking
model LamportCounter {
  id            Int      @id @default(1)
  currentValue  Int      @default(0)
  lastUpdated   DateTime @default(now())
  lastReceiptId Int?
  metadata      Json? // Additional counter metadata

  @@map("lamport_counter")
}

// BEN Receipt storage (Δ-Receipt state machine)
model BENReceipt {
  id            Int         @id @default(autoincrement())
  receiptType   ReceiptType
  lamportClock  Int
  realTimestamp DateTime    @default(now())
  userId        Int?
  user          User?       @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Receipt content
  persona BENPersona @default(USER)
  track   TrackType?
  payload Json // Receipt-specific data

  // Canonical projection
  digest         String // SHA-256 hash of content
  previousDigest String? // Link to previous receipt
  baselineDigest String? // Anchor to baseline

  // Witness attestation
  witnessModel     String? // ${MODEL_NAME} or ${FP_GPT5}
  witnessSignature String? // Model fingerprint/signature

  // Metadata
  metadata  Json?
  createdAt DateTime @default(now())

  // Relations
  handoffsFrom TriTrackHandoff[] @relation("FromReceipt")
  handoffsTo   TriTrackHandoff[] @relation("ToReceipt")

  @@index([lamportClock])
  @@index([receiptType, lamportClock])
  @@index([userId, lamportClock])
  @@index([digest])
  @@map("ben_receipts")
}

// BEN Persona sessions (locks and switches)
model BENSession {
  id     Int  @id @default(autoincrement())
  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  persona  BENPersona
  priority Int // ARCHITECT=99, GOVERNOR=90, ANALYST=80, VERIFIER=70, USER=0
  locked   Boolean    @default(false)

  // Session lifecycle
  startedAt DateTime  @default(now())
  endedAt   DateTime?
  duration  Int? // seconds

  // Lamport tracking
  startLamport Int
  endLamport   Int?

  // Session metadata
  switchReason String? @db.Text
  metadata     Json?

  @@index([userId, startedAt])
  @@index([persona, startedAt])
  @@map("ben_sessions")
}

// Tri-Track handoff orchestration
model TriTrackHandoff {
  id Int @id @default(autoincrement())

  // Handoff tracks
  fromTrack TrackType
  toTrack   TrackType
  status    HandoffStatus @default(INITIATED)

  // Receipt linking
  fromReceiptId Int
  fromReceipt   BENReceipt  @relation("FromReceipt", fields: [fromReceiptId], references: [id], onDelete: Cascade)
  toReceiptId   Int?
  toReceipt     BENReceipt? @relation("ToReceipt", fields: [toReceiptId], references: [id], onDelete: Cascade)

  // Timing (≤60s latency constraint)
  initiatedAt   DateTime  @default(now())
  completedAt   DateTime?
  latencyMs     Int? // milliseconds
  exceededLimit Boolean   @default(false)

  // Handoff data
  payload      Json
  result       Json?
  errorMessage String? @db.Text

  // Metadata
  metadata Json?

  @@index([fromTrack, toTrack, initiatedAt])
  @@index([status, initiatedAt])
  @@map("tri_track_handoffs")
}

// Witness signature storage
model WitnessSignature {
  id Int @id @default(autoincrement())

  // Model identification
  modelName        String // ${MODEL_NAME}, ${FP_GPT5}, etc.
  modelFingerprint String // Cryptographic fingerprint

  // Receipt association
  receiptId     Int?
  receiptDigest String // Receipt digest being witnessed

  // Signature data
  signature    String // Model attestation signature
  signedAt     DateTime @default(now())
  lamportClock Int

  // Verification
  verified         Boolean   @default(false)
  verifiedAt       DateTime?
  verificationData Json?

  // Metadata
  metadata Json?

  @@index([receiptDigest])
  @@index([modelName, signedAt])
  @@map("witness_signatures")
}

// CRIES engine computation results
model CRIESComputation {
  id Int @id @default(autoincrement())

  // Test association
  testResultId Int?
  userId       Int?

  // CRIES components
  sigmaWindow     Float // σ-window analysis (prompt quality)
  tauThreshold    Float // τ-threshold (response coherence)
  piPolicy        Float // Π-policy adherence
  citationQuality Float // Citation coupling score

  // Final score
  criesScore Float // 0-100 scale

  // Computation metadata
  lamportClock Int
  computedAt   DateTime @default(now())
  receiptId    Int? // Δ-ANALYSIS receipt

  // Analysis details
  analysisData Json? // Detailed breakdown
  metadata     Json?

  @@index([criesScore, computedAt])
  @@index([userId, computedAt])
  @@map("cries_computations")
}

// Z-Scan verification results
model ZScanVerification {
  id     Int   @id @default(autoincrement())
  userId Int?
  user   User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Scan results
  totalRules Int // Total rules checked
  passed     Int // Number of rules that passed
  warnings   Int // Number of warnings
  critical   Int // Number of critical issues

  // Detailed results
  results Json // Array of ZScanResult objects
  config  Json // ZScanConfig used for this scan

  createdAt DateTime @default(now())

  @@index([userId])
  @@index([createdAt])
  @@map("zscan_verifications")
}

enum Role {
  USER
  ADMIN
  ARCHITECT // Can modify system configuration
  AUDITOR // Can view and verify audit logs
  WITNESS // External verifier
}

enum Permission {
  READ_LOGS
  WRITE_LOGS
  MANAGE_USERS
  MANAGE_TEAMS
  VERIFY_RECORDS
  EXPORT_DATA
  VIEW_ANALYTICS
  MANAGE_SETTINGS
}

enum TeamRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum UserTier {
  FREE // Demo access only, predefined prompts
  PAID // Full access, model uploads
  ARCHITECT // System configuration access
}

enum OrgStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  TRIAL
}

enum PlanType {
  TRIAL
  BASIC
  PRO
  ENTERPRISE
}

enum AuditCategory {
  AUTH // Authentication events
  ACCESS // Access control changes
  DATA // Data modifications
  CONFIG // Configuration changes
  VERIFICATION // Verification events
  SYSTEM // System events
}

enum AuditStatus {
  SUCCESS
  FAILURE
  WARNING
  INFO
}

enum FeedbackType {
  BUG
  FEATURE
  IMPROVEMENT
  QUESTION
  OTHER
}

enum FeedbackCategory {
  UI_UX // User interface/experience issues
  PERFORMANCE // Speed, loading, responsiveness
  ACCURACY // Model accuracy, result quality
  DOCUMENTATION // Docs, guides, examples
  API // API functionality, integration
  BILLING // Pricing, payments, invoices
  SECURITY // Security concerns
  GENERAL // General feedback
}

enum FeedbackPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum FeedbackStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
  WONT_FIX
}

enum SecurityEventType {
  LOGIN_SUCCESS
  LOGIN_FAILED
  LOGOUT
  PASSWORD_CHANGE
  PASSWORD_RESET
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  TWO_FACTOR_VERIFIED
  TWO_FACTOR_FAILED
  ACCOUNT_LOCKED
  ACCOUNT_UNLOCKED
  IP_WHITELIST_ADDED
  IP_WHITELIST_REMOVED
  IP_BLOCKED
  SESSION_CREATED
  SESSION_TERMINATED
  PERMISSION_CHANGED
  SUSPICIOUS_ACTIVITY
}

enum SecuritySeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum SSOProvider {
  SAML
  AZURE_AD
  GOOGLE
  OKTA
  GENERIC_OAUTH
}

enum SSOEventType {
  SSO_LOGIN_SUCCESS
  SSO_LOGIN_FAILED
  SSO_LOGOUT
  SSO_CONFIG_CREATED
  SSO_CONFIG_UPDATED
  SSO_CONFIG_DELETED
  SSO_CONFIG_ENABLED
  SSO_CONFIG_DISABLED
  JIT_USER_CREATED
  JIT_USER_UPDATED
  SSO_SESSION_EXPIRED
  SSO_CALLBACK_ERROR
  SAML_ASSERTION_ERROR
  OAUTH_TOKEN_ERROR
}

// BEN Runtime Enums
enum BENPersona {
  USER // Default user persona (priority 0)
  VERIFIER // Verification role (priority 70)
  ANALYST // Analysis role (priority 80)
  GOVERNOR // Governance role (priority 90)
  ARCHITECT // Architecture role (priority 99)
}

enum ReceiptType {
  BOOT_CONFIRM // Δ-BOOTCONFIRM: Initialization receipt
  ANALYSIS // Δ-ANALYSIS: BEN computation results
  DIRECTIVE // Δ-DIRECTIVE: Governance commands
  RESULT // Δ-RESULT: Execution outcomes
  APPEND // Δ-APPEND: State mutations
  SYNC_POINT // Δ-SYNCPOINT: Coordination markers
}

enum TrackType {
  BEN_CORE // Track-A: BEN Core (Analyst role, enforces Π/τ)
  AUDITAAI // Track-B: AuditaAI (Governor/Verifier, applies policies)
  HUMAN // Track-C: Human (Executor, receives directives)
}

enum HandoffStatus {
  INITIATED // Handoff started
  IN_TRANSIT // Moving between tracks
  COMPLETED // Handoff successful
  FAILED // Handoff failed
  TIMEOUT // Exceeded 60s latency limit
}
