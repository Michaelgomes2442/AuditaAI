generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgres://602197f00e8365db70a65c273a252d29dd8416ebc9aa13b39a924676dded4798:sk_AUlPOQWqWgGfhKEAhZ5IZ@db.prisma.io:5432/postgres?sslmode=require"
}

model User {
  id                  Int                     @id @default(autoincrement())
  email               String                  @unique
  password            String
  name                String?
  role                Role                    @default(USER)
  tier                UserTier                @default(FREE)
  permissions         Permission[]            @default([])
  orgId               Int?
  status              UserStatus              @default(ACTIVE)
  lastLoginAt         DateTime?
  createdAt           DateTime                @default(now())
  updatedAt           DateTime                @updatedAt
  twoFactorEnabled    Boolean                 @default(false)
  twoFactorSecret     String?
  backupCodes         String[]                @default([])
  failedLoginAttempts Int                     @default(0)
  lockedUntil         DateTime?
  passwordChangedAt   DateTime?
  ssoProvider         String?
  ssoId               String?                 @unique
  ssoMetadata         Json?
  currentPersona      BENPersona              @default(USER)
  personaLocked       Boolean                 @default(false)
  lamportCounter      Int                     @default(0)
  lastReceiptId       Int?
  audits              AuditRecord[]
  budgets             Budget[]
  feedbacks           Feedback[]
  notifications       NotificationPreference?
  regressionBaselines RegressionBaseline[]
  sessions            Session[]
  teams               TeamMember[]
  organization        Organization?           @relation(fields: [orgId], references: [id])
  benReceipts         BENReceipt[]
  benSessions         BENSession[]
  zscans              ZScanVerification[]
}

model Organization {
  id         Int                @id @default(autoincrement())
  name       String
  plan       PlanType           @default(TRIAL)
  status     OrgStatus          @default(ACTIVE)
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  ssoConfigs SSOConfiguration[]
  teams      Team[]
  users      User[]
}

model Team {
  id           Int          @id @default(autoincrement())
  name         String
  orgId        Int
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  organization Organization @relation(fields: [orgId], references: [id])
  members      TeamMember[]
}

model TeamMember {
  id        Int      @id @default(autoincrement())
  teamId    Int
  userId    Int
  role      TeamRole @default(MEMBER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  team      Team     @relation(fields: [teamId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([teamId, userId])
}

model AuditRecord {
  id             Int           @id @default(autoincrement())
  userId         Int
  action         String
  category       AuditCategory
  details        Json?
  metadata       Json?
  status         AuditStatus   @default(SUCCESS)
  lamport        Int
  hashPointer    String?
  organizationId Int?
  blockHash      String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  user           User          @relation(fields: [userId], references: [id])

  @@index([category, createdAt])
  @@index([userId, createdAt])
}

model Block {
  id             Int      @id @default(autoincrement())
  hash           String   @unique
  previousHash   String
  organizationId Int?
  lamportClock   Int
  metricsData    Json
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([organizationId, createdAt])
  @@index([lamportClock])
}

model Session {
  id         Int      @id @default(autoincrement())
  userId     Int
  expiresAt  DateTime
  userAgent  String?
  ipAddress  String?
  createdAt  DateTime @default(now())
  lastUsedAt DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
}

model Budget {
  id        Int      @id @default(autoincrement())
  userId    Int
  limit     Float
  period    String   @default("monthly")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId, createdAt])
}

model RegressionBaseline {
  id              Int      @id @default(autoincrement())
  userId          Int
  modelName       String
  modelVersion    String?
  testType        String
  avgResponseTime Float
  avgCost         Float
  avgQualityScore Float
  avgAccuracy     Float
  successRate     Float
  alertThreshold  Float    @default(10.0)
  sampleSize      Int
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id])

  @@unique([userId, modelName, modelVersion, testType])
  @@index([userId, modelName, isActive])
}

model Feedback {
  id             Int              @id @default(autoincrement())
  userId         Int
  type           FeedbackType
  category       FeedbackCategory
  priority       FeedbackPriority @default(MEDIUM)
  subject        String
  message        String
  url            String?
  userAgent      String?
  status         FeedbackStatus   @default(OPEN)
  assignedTo     Int?
  response       String?
  respondedAt    DateTime?
  respondedBy    Int?
  sentiment      String?
  sentimentScore Float?
  upvotes        Int              @default(0)
  isPublic       Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  resolvedAt     DateTime?
  user           User             @relation(fields: [userId], references: [id])

  @@index([userId, createdAt])
  @@index([type, status])
  @@index([category, status])
  @@index([priority, status])
  @@index([assignedTo, status])
}

model LamportCounter {
  id            Int      @id @default(1)
  currentValue  Int      @default(0)
  lastUpdated   DateTime @default(now())
  lastReceiptId Int?
  metadata      Json?

  @@map("lamport_counter")
}

model BENReceipt {
  id               Int               @id @default(autoincrement())
  receiptType      ReceiptType
  lamportClock     Int
  realTimestamp    DateTime          @default(now())
  userId           Int?
  persona          BENPersona        @default(USER)
  track            TrackType?
  payload          Json
  digest           String
  previousDigest   String?
  baselineDigest   String?
  witnessModel     String?
  witnessSignature String?
  metadata         Json?
  createdAt        DateTime          @default(now())
  user             User?             @relation(fields: [userId], references: [id], onDelete: Cascade)
  handoffsFrom     TriTrackHandoff[] @relation("FromReceipt")
  handoffsTo       TriTrackHandoff[] @relation("ToReceipt")

  @@index([lamportClock])
  @@index([receiptType, lamportClock])
  @@index([userId, lamportClock])
  @@index([realTimestamp])
  @@index([createdAt])
  @@index([userId, realTimestamp])
  @@index([digest])
  @@index([payload])
  @@index([realTimestamp, payload])
  @@map("ben_receipts")
}

model BENSession {
  id           Int        @id @default(autoincrement())
  userId       Int
  persona      BENPersona
  priority     Int
  locked       Boolean    @default(false)
  startedAt    DateTime   @default(now())
  endedAt      DateTime?
  duration     Int?
  startLamport Int
  endLamport   Int?
  switchReason String?
  metadata     Json?
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, startedAt])
  @@index([persona, startedAt])
  @@map("ben_sessions")
}

model TriTrackHandoff {
  id            Int           @id @default(autoincrement())
  fromTrack     TrackType
  toTrack       TrackType
  status        HandoffStatus @default(INITIATED)
  fromReceiptId Int
  toReceiptId   Int?
  initiatedAt   DateTime      @default(now())
  completedAt   DateTime?
  latencyMs     Int?
  exceededLimit Boolean       @default(false)
  payload       Json
  result        Json?
  errorMessage  String?
  metadata      Json?
  fromReceipt   BENReceipt    @relation("FromReceipt", fields: [fromReceiptId], references: [id], onDelete: Cascade)
  toReceipt     BENReceipt?   @relation("ToReceipt", fields: [toReceiptId], references: [id], onDelete: Cascade)

  @@index([fromTrack, toTrack, initiatedAt])
  @@index([status, initiatedAt])
  @@map("tri_track_handoffs")
}

model ZScanVerification {
  id         Int      @id @default(autoincrement())
  userId     Int?
  totalRules Int
  passed     Int
  warnings   Int
  critical   Int
  results    Json
  config     Json
  createdAt  DateTime @default(now())
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
  @@map("zscan_verifications")
}

model SSOConfiguration {
  id                Int          @id @default(autoincrement())
  orgId             Int
  provider          SSOProvider
  enabled           Boolean      @default(false)
  samlEntryPoint    String?
  samlIssuer        String?
  samlCert          String?
  samlCallbackUrl   String?
  samlLogoutUrl     String?
  oauthClientId     String?
  oauthClientSecret String?
  oauthAuthUrl      String?
  oauthTokenUrl     String?
  oauthUserInfoUrl  String?
  oauthScopes       String[]     @default([])
  domainRestriction String[]     @default([])
  jitProvisioning   Boolean      @default(true)
  defaultRole       Role         @default(USER)
  defaultTier       UserTier     @default(FREE)
  metadata          Json?
  createdBy         Int
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  lastUsedAt        DateTime?
  organization      Organization @relation(fields: [orgId], references: [id])

  @@unique([orgId, provider])
  @@index([provider, enabled])
}

model NotificationPreference {
  id                    Int      @id @default(autoincrement())
  userId                Int      @unique
  emailEnabled          Boolean  @default(true)
  testComplete          Boolean  @default(true)
  batchComplete         Boolean  @default(true)
  scheduledTestComplete Boolean  @default(true)
  alertsEnabled         Boolean  @default(true)
  lowScoreThreshold     Float    @default(70)
  highScoreThreshold    Float    @default(90)
  scoreDropAlert        Boolean  @default(true)
  witnessFailureAlert   Boolean  @default(true)
  dailyReport           Boolean  @default(false)
  weeklyReport          Boolean  @default(true)
  monthlyReport         Boolean  @default(false)
  reportTime            String   @default("09:00")
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  user                  User     @relation(fields: [userId], references: [id])
}

enum Role {
  USER
  ADMIN
  ARCHITECT
  AUDITOR
  WITNESS
}

enum Permission {
  READ_LOGS
  WRITE_LOGS
  MANAGE_USERS
  MANAGE_TEAMS
  VERIFY_RECORDS
  EXPORT_DATA
  VIEW_ANALYTICS
  MANAGE_SETTINGS
}

enum TeamRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum UserTier {
  FREE
  PAID
  ARCHITECT
}

enum OrgStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  TRIAL
}

enum PlanType {
  TRIAL
  BASIC
  PRO
  ENTERPRISE
}

enum AuditCategory {
  AUTH
  ACCESS
  DATA
  CONFIG
  VERIFICATION
  SYSTEM
}

enum AuditStatus {
  SUCCESS
  FAILURE
  WARNING
  INFO
}

enum FeedbackType {
  BUG
  FEATURE
  IMPROVEMENT
  QUESTION
  OTHER
}

enum FeedbackCategory {
  UI_UX
  PERFORMANCE
  ACCURACY
  DOCUMENTATION
  API
  BILLING
  SECURITY
  GENERAL
}

enum FeedbackPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum FeedbackStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
  WONT_FIX
}

enum SSOProvider {
  SAML
  AZURE_AD
  GOOGLE
  OKTA
  GENERIC_OAUTH
}

enum BENPersona {
  USER
  VERIFIER
  ANALYST
  GOVERNOR
  ARCHITECT
}

enum ReceiptType {
  BOOT_CONFIRM
  ANALYSIS
  DIRECTIVE
  RESULT
  APPEND
  SYNC_POINT
}

enum TrackType {
  BEN_CORE
  AUDITAAI
  HUMAN
}

enum HandoffStatus {
  INITIATED
  IN_TRANSIT
  COMPLETED
  FAILED
  TIMEOUT
}
