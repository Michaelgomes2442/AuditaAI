// AuditaAI Prisma Schema
// Version: Band-1.3 (vÎ©.9)

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-py"
  interface = "asyncio"
}

// Core Receipt Model
model Receipt {
  id              String   @id @default(cuid())
  receipt_type    String   // Maps to ReceiptType enum
  lamport         Int
  prev_digest     String?
  self_hash       String   @unique
  trace_id        String
  timestamp       DateTime @default(now())
  actor_signature String?
  band            String   // Maps to BandLevel enum
  track           String   // Maps to Track enum
  metadata        Json?    // Additional receipt-specific data

  // Relations
  research_station ResearchStation? @relation(fields: [station_id], references: [id])
  station_id      String?

  @@index([lamport])
  @@index([receipt_type])
  @@index([trace_id])
}

// Research Station Models
model ResearchStation {
  id              String   @id @default(cuid())
  name            String
  tier            String   // basic, professional, enterprise
  audit_limit     Int      // Daily audit limit
  analyst_limit   Int      // Maximum number of analysts
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  // Features
  has_advanced_cries    Boolean @default(false)
  has_custom_policies   Boolean @default(false)
  has_predictive_analytics Boolean @default(false)

  // Relations
  receipts       Receipt[]
  analysts       Analyst[]
  models         Model[]
  policies       Policy[]

  @@index([tier])
}

model Analyst {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  role        String   // admin, analyst, viewer
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relations
  station     ResearchStation @relation(fields: [station_id], references: [id])
  station_id  String

  @@index([role])
}

model Model {
  id          String   @id @default(cuid())
  name        String
  version     String
  type        String   // e.g., GPT-4, Claude, etc.
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relations
  station     ResearchStation @relation(fields: [station_id], references: [id])
  station_id  String

  @@unique([name, version])
}

model Policy {
  id          String   @id @default(cuid())
  name        String
  description String
  rules       Json     // Policy rule definitions
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  is_active   Boolean  @default(true)

  // Relations
  station     ResearchStation @relation(fields: [station_id], references: [id])
  station_id  String

  @@index([is_active])
}

// CRIES Metrics History
model CRIESMetrics {
  id          String   @id @default(cuid())
  timestamp   DateTime @default(now())
  clarity     Float
  reliability Float
  integrity   Float
  efficiency  Float
  safety      Float
  
  // Metadata
  trace_id    String?
  model_id    String?
  policy_id   String?

  @@index([timestamp])
}

// Stability Metrics History
model StabilityMetrics {
  id          String   @id @default(cuid())
  timestamp   DateTime @default(now())
  sigma_t     Float    // Current stability
  omega_t     Float    // System state
  eta         Float    // Learning rate
  gamma_b     Float    // Governance dampening
  weights     Json     // Track weights

  @@index([timestamp])
}